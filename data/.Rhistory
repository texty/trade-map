mistakes_df <- data.frame(table(mistakes_vector))
search_for_mistakes <- filteredData %>%
filter(V6 == "Заробітна плата отримана за основним місцем роботи") %>%
filter(total > 44676 ) %>%
mutate(V5 = trimws(V5)) %>%
mutate(V5 = removeNumbers(V5)) %>%
filter(str_detect(V4, "[А-Яа-я]") & str_detect(V5, "[А-Яа-я]")) %>%
filter(!str_detect(V5, "пенсіонер|не прац|не ма(є|ю)")) %>%
filter(!str_detect(V5, "абзац"))%>%
select(1,2,3,7,5,6,8) %>%
head(30000)
View(apostrof_df)
mistakes_vector = c()
for(i in 1:length(search_for_mistakes$V5)){
row = check_spell(search_for_mistakes$V5[i])
if(!is.na(row)){
mistakes_vector = c(mistakes_vector, check_spell(search_for_mistakes$V5[i]))
}
}
mistakes_df <- data.frame(table(mistakes_vector))
View(mistakes_df)
mistakes_df$category = NA
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], max.distance=c(cost=1, all=1))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], max.distance=c(cost=2, all=2))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], max.distance=c(cost=80, all=80))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], ignore.case = FALSE,  max.distance=0.1)
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], ignore.case = FALSE,  max.distance=0.9)
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], ignore.case = FALSE,  max.distance=c(cost=1, all=1))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
mistakes_df$category = NA
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], ignore.case = FALSE,  max.distance=c(cost=1, all=1))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
for(k in 1:length(apostrof_words)){
print(apostrof_words[k])
for(i in 1:length(mistakes_df$mistakes_vector)){
isPresent = lapply(apostrof_words[k], agrepl, x=mistakes_df$mistakes_vector[i], ignore.case = FALSE,  max.distance=c(cost=1, all=1))
if(isPresent[[1]] == TRUE){
print("true")
mistakes_df$category[i] = apostrof_words[k]
}
}
}
View(check_test)
# у цього метода є похибка через те, що hunspell приймає за помилки штучно створені слова накшталт Держгеокадастр або телерадіовідеозвʼязок
check_test <- apostrof_df %>%
group_by(category, mistake) %>%
transmute(freq=sum(freq)) %>%
ungroup() %>%
unique()
apostrof_df <- apostrof_df %>%
arrange(category, Freq)
apostrof_df <- apostrof_df %>%
arrange(category, freq)
View(apostrof_df)
# у цього метода є похибка через те, що hunspell приймає за помилки штучно створені слова накшталт Держгеокадастр або телерадіовідеозвʼязок
check_test <- apostrof_df %>%
group_by(category, mistake) %>%
transmute(freq=sum(freq)) %>%
ungroup() %>%
unique() %>%
arange(category, mistake)
# у цього метода є похибка через те, що hunspell приймає за помилки штучно створені слова накшталт Держгеокадастр або телерадіовідеозвʼязок
check_test <- apostrof_df %>%
group_by(category, mistake) %>%
transmute(freq=sum(freq)) %>%
ungroup() %>%
unique() %>%
arrange(category, mistake)
apostrof_df$stem = hunspell_stem(apostrof_df$apostrof_vector)
hunspell_stem("технічно")
hunspell_analyze("технічно")
hunspell_stem("технічно", dict = 'uk_UA')
apostrof_df$stem = hunspell_stem(apostrof_df$apostrof_vector, dict = 'uk_UA')
View(filteredData)
apostrof_vector
library(httr)
library(rvest)
library(dplyr)
library(stringr)
library(RSelenium)
library(XML)
library(RCurl)
html <- read_html("https://www.cvk.gov.ua/pls/vnd2006/w6p001.html")
parties <- html%>%
html_nodes('tbody > tr:nth-child(3) > td:nth-child(1) a')%>%
html_attr('href') %>%
gsub(pattern="\\D+", replacement = "")
parties <- html%>%
html_nodes('tbody > tr:nth-child(3) > td:nth-child(1) a')%>%
html_text()
parties <- html%>%
html_nodes('table:nth-child(6) > tbody > tr')%>%
html_text('')
parties <- html %>%
html_nodes('table:nth-child(6) > tbody > tr > td > a')%>%
html_text()
html[1]
html[2]
parties <- html %>%
html_nodes('table.t2')%>%
html_text()
parties
html <- read_html("https://www.cvk.gov.ua/pls/vnd2006/w6p001.html")
parties <- html %>%
html_nodes('td.td10')%>%
html_text()
library(httr)
library(rvest)
library(dplyr)
library(stringr)
library(RSelenium)
library(XML)
library(RCurl)
html <- read_html("https://www.cvk.gov.ua/pls/vnd2006/w6p001.html")
parties <- html %>%
html_nodes('td.td10')%>%
html_text()
driver<- rsDriver(browser=c("chrome"), verbose = FALSE, version = "3.11.0")
driver<- rsDriver(browser=c("chrome"), verbose = FALSE)
html <- read_html("https://www.cvk.gov.ua/pls/vnd2006/W6P002270de.html?PT001F01=600&PMENU=0")
parties <- html %>%
html_nodes('td.td10')%>%
html_text()
library("treemap")
# Create data
group=c("Освітня субвенція з державного бюджету місцевим бюджетам",
"Медична субвенція з державного бюджету місцевим бюджетам",
"Субвенція з місцевого бюджету на відшкодування вартості лікарських засобів для лікування окремих захворювань за рахунок відповідної субвенції з державного бюджету",
"Дотація з місцевого бюджету на здійснення переданих з державного бюджету видатків з утримання закладів освіти та охорони здоров`я за рахунок відповідної додаткової дотації з державного бюджету",
"Базова дотація",
"Власні доходи"
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
17258.4,
)
data=data.frame(group,value)
# treemap
treemap(data,
index="group",
vSize="value",
type="index"
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
17258.4,
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
17258.4
)
data=data.frame(group,value)
# treemap
treemap(data,
index="group",
vSize="value",
type="index"
)
# treemap
treemap(data,
index="value",
vSize="value",
type="index"
)
# Create data
group=c("Освітня субвенція з державного бюджету місцевим бюджетам",
"Медична субвенція з державного бюджету місцевим бюджетам",
"Субвенція з місцевого бюджету на відшкодування вартості лікарських засобів для лікування окремих захворювань за рахунок відповідної субвенції з державного бюджету",
"Дотація з місцевого бюджету на здійснення переданих з державного бюджету видатків з утримання закладів освіти та охорони здоров`я за рахунок відповідної додаткової дотації з державного бюджету",
"Базова дотація",
"Податок на доходи фізичних осіб",
"Податок на прибуток підприємств",
"Акцизний податок",
"Рентна плата",
"Податок на майно ",
"Єдиий податок",
"Збір за місця для паркування ",
"Туристичний збір",
"Екологічний податок",
"Доходи від власності та підприємницької діяльності",
"Адміністративні збори та платежі, доходи від некомерційної господарської діяльності",
"Власні надходження бюджетних установ"
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
7266.6,
133.0,
4234.2,
4881.5,
4.6,
10.0,
0.5,
43.4,
684.6
)
data=data.frame(group,value)
# treemap
treemap(data,
index="value",
vSize="value",
type="index"
)
# Create data
group=c("Освітня субвенція з державного бюджету місцевим бюджетам",
"Медична субвенція з державного бюджету місцевим бюджетам",
"Субвенція з місцевого бюджету на відшкодування вартості лікарських засобів для лікування окремих захворювань за рахунок відповідної субвенції з державного бюджету",
"Дотація з місцевого бюджету на здійснення переданих з державного бюджету видатків з утримання закладів освіти та охорони здоров`я за рахунок відповідної додаткової дотації з державного бюджету",
"Базова дотація",
"Податок на доходи фізичних осіб",
"Акцизний податок",
"Податок на майно ",
"Єдиий податок",
"Збір за місця для паркування ",
"Туристичний збір",
"Екологічний податок",
"Доходи від власності та підприємницької діяльності",
"Адміністративні збори та платежі, доходи від некомерційної господарської діяльності",
"Власні надходження бюджетних установ"
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
7266.6,
133.0,
4234.2,
4881.5,
4.6,
10.0,
0.5,
43.4,
684.6
)
data=data.frame(group,value)
# Create data
group=c("Освітня субвенція з державного бюджету місцевим бюджетам",
"Медична субвенція з державного бюджету місцевим бюджетам",
"Субвенція з місцевого бюджету на відшкодування вартості лікарських засобів для лікування окремих захворювань за рахунок відповідної субвенції з державного бюджету",
"Дотація з місцевого бюджету на здійснення переданих з державного бюджету видатків з утримання закладів освіти та охорони здоров`я за рахунок відповідної додаткової дотації з державного бюджету",
"Базова дотація",
"Податок на доходи фізичних осіб",
"Акцизний податок",
"Податок на майно ",
"Єдиий податок",
"Туристичний збір",
"Екологічний податок",
"Доходи від власності та підприємницької діяльності",
"Адміністративні збори та платежі, доходи від некомерційної господарської діяльності",
"Власні надходження бюджетних установ"
)
value=c(9686.8,
3688.4,
45.8,
2174.3,
3832.5,
7266.6,
133.0,
4234.2,
4881.5,
4.6,
10.0,
0.5,
43.4,
684.6
)
data=data.frame(group,value)
# treemap
treemap(data,
index="value",
vSize="value",
type="index"
)
# treemap
treemap(data,
index="value",
vSize="value",
type="index"
)
# treemap
treemap(data,
index="value",
vSize="value",
type="index"
)
df
library("readxl")
library("xlsx")
library('dplyr')
library('lubridate')
library('stringr')
library("tidyr")
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
View(data)
for(i in 1:length(data$sort)){
if(categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
}
}
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
}
}
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 10){
data$sort[i] = 1
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 2
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 3
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 4
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 5
}
}
setwd('/home/yevheniia/git/import-export/data')
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data2.csv", row.names = F)
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 2
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 3
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 4
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 5
}
}
str(data)
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 2
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 3
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 4
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 5
} else if (data$categotyNumber[i] == 10 & data$category[i] == "subgroup"){
data$sort[i] = data$sort[i]
}
}
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data2.csv", row.names = F)
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 5000
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 6000
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 7000
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 8000
} else if (data$categotyNumber[i] == 10 & data$category[i] == "subgroup"){
data$sort[i] = data$sort[i]
}
}
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data2.csv", row.names = F)
setwd('/home/yevheniia/git/import-export/data')
data = read.csv("data.csv", stringsAsFactors = F)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 2000
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 3000
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 4000
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 5000
} else if (data$categotyNumber[i] == 39){
data$sort[i] = 6000
} else if (data$categotyNumber[i] == 30){
data$sort[i] = 7000
} else if (data$categotyNumber[i] == 10 & data$category[i] == "subgroup"){
data$sort[i] = data$sort[i]
}
}
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data2.csv", row.names = F)
data = data %>%
filter(categotyNumber != 30)
for(i in 1:length(data$sort)){
if(data$categotyNumber[i] < 10){
data$sort[i] = paste0("9", data$sort[i])
} else if (data$categotyNumber[i] == 72){
data$sort[i] = 0
} else if (data$categotyNumber[i] == 27){
data$sort[i] = 2000
} else if (data$categotyNumber[i] == 84){
data$sort[i] = 3000
} else if (data$categotyNumber[i] == 15){
data$sort[i] = 4000
} else if (data$categotyNumber[i] == 87){
data$sort[i] = 5000
} else if (data$categotyNumber[i] == 85){
data$sort[i] = 6000
} else if (data$categotyNumber[i] == 39){
data$sort[i] = 7000
} else if (data$categotyNumber[i] == 10 & data$category[i] == "subgroup"){
data$sort[i] = data$sort[i]
}
}
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data2.csv", row.names = F)
setwd('/home/yevheniia/git/import-export/data')
write.csv(data, "data.csv", row.names = F)
